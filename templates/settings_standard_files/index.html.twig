{% extends 'column.html.twig' %}

{% block title %}Settings Standard Files{% endblock %}

{% block body %}
    <h1>Settings Standard Files</h1>

    <!-- FILTER FORM -->
    <div class="mt-4">
        <div class="row">
            <!-- Site Filter -->
            <div class="col-md-3">
                <select name="site" id="site" class="form-control">
                    <option value="" disabled selected>üè≠ Select a site</option>
                    {% for site in sites %}
                        <option value="{{ site.idsites }}" {% if site.idsites == selectedSite %}selected{% endif %}>
                            {{ site.siteref }}
                        </option>
                    {% endfor %}
                </select>
            </div>

            <!-- Machine Filter -->
            <div class="col-md-3">
                <select name="machine" id="machine" class="form-control">
                    <option value = "" disabled selected>‚öôÔ∏è Select a machine</option>
                    {% for machine in machines %}
                        <option value="{{ machine.idcfgmachine }}" {% if machine.idcfgmachine == selectedMachine %}selected{% endif %}>
                            {{ machine.macreference }}
                        </option>
                    {% endfor %}
                </select>
            </div>

            <!-- Tool Filter -->
            <div class="col-md-3">
                <select name="tool" id="tool" class="form-control">
                    <option value = "" disabled selected>üõ† Select a tool</option>
                    {% for tool in tools %}
                        <option value="{{ tool.idcfgtool }}" {% if tool.idcfgtool == selectedTool %}selected{% endif %}>
                            {{ tool.toolreference }}
                        </option>
                    {% endfor %}
                </select>
            </div>

            <!-- Submit Button -->
            <div class="col-md-3 d-flex align-items-end">
                <a href="#" id="resetFilters" class="btn btn-secondary ml-2">Reset</a>
            </div>
        </div>
    </div>

    <!-- DISPLAY FILTERED RESULTS -->
    <div class="mt-4">
        {% for siteName, files in groupedFiles %}
            <h3 id="headers" style="background-color: rgb(222, 222, 222); color: rgb(0, 0, 0); padding: 10px; margin-top: 20px;">
                {{ siteName }}
            </h3>
            <div class="row">
                {% for file in files %}
                    {% if isInGroup1 or file.activefile %}
                        <div class="col-md-3 mb-4 file-card" data-site="{{ file.siteName }}" data-machine="{{ file.machineName }}" data-tool="{{ file.toolName }}">                            
                            <div class="card">
                                {% if file.imageFilename %}
                                    <img src="{{ asset('uploads/' ~ file.imageFilename) }}" alt="Image for {{ file.toolName }}" class="card-img-top" style="height: 150px; object-fit: cover;">
                                {% else %}
                                    <div class="card-img-top" style="height: 150px; background-color: #f0f0f0; display: flex; justify-content: center; align-items: center;">
                                        No Image
                                    </div>
                                {% endif %}
                                <div class="card-body">
                                    <h5 class="card-title">{{ file.toolName }}</h5>
                                    <p class="card-text">
                                        <strong>Site:</strong> {{ file.siteName }}<br>
                                        <strong>Machine:</strong> {{ file.machineName }}<br>
                                        <strong>Tool Version:</strong> {{ file.toolVersionName }}<br>
                                    </p>
                                    <div class="d-flex">
                                    <a href="{{ path('edit_settings_standard', { idSettStdFile: file.idsettstdfile }) }}" class="btn btn-warning btn-sm me-2" title="Edit Settings"><i class="fa-solid fa-pencil"></i></a>
                                    <a href="{{ path('settingsstandardfiles_show', { idSettStdFile: file.idsettstdfile }) }}" class="btn btn-warning btn-sm me-2" title="View Details"><i class="fa-solid fa-eye"></i></a>
                                    {% if isInGroup1 %}
                                    <!-- Button to toggle the active status -->
                                        <a href="{{ path('file_hidden', { id: file.idsettstdfile }) }}" class="btn btn-warning btn-sm">
                                            {% if file.activefile %}
                                                <i class="fa-solid fa-book-open"title="Archive a file"></i>
                                            {% else %}
                                                <i class="fa-solid fa-book"title="Unarchive a file"></i>
                                            {% endif %}
                                        </a>
                                    {% endif %}
                                    </div>
                                </div>
                            </div>
                        </div>
                    {% endif %}
                {% endfor %}
            </div>
        {% else %}
            <p class="text-muted">No results found for the selected filters.</p>
        {% endfor %}
    </div>
    {% block javascripts %}
        <script>
            // Listen for change event on the site dropdown
            document.getElementById('site').addEventListener('change', function() {
                var siteId = this.value; // Get the selected site ID
                var refmacSelect = document.getElementById('machine'); // Machine dropdown
                var refmouldSelect = document.getElementById('tool'); // Mould dropdown

                // Clear existing options
                refmacSelect.innerHTML = '<option value="" disabled selected>‚öôÔ∏è Select a machine</option>';
                refmouldSelect.innerHTML = '<option value="" disabled selected>üõ† Select a mould</option>';

                // Fetch machines for the selected site
                fetch('/apifetcher/get-machines?idSite=' + siteId)
                    .then(response => response.json())
                    .then(data => {
                        if (data.length > 0) {
                            data.forEach(function(machine) {
                                var option = document.createElement('option');
                                option.value = machine.id;
                                option.textContent = machine.name;
                                refmacSelect.appendChild(option);
                            });
                        } else {
                            var option = document.createElement('option');
                            option.value = '';
                            option.textContent = 'No machines available';
                            refmacSelect.appendChild(option);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching machines:', error);
                    });
            });

            // Listen for change event on the machine dropdown
            document.getElementById('machine').addEventListener('change', function() {
                var siteId = document.getElementById('site').value;
                var macId = this.value;
                var refmouldSelect = document.getElementById('tool'); // Mould dropdown

                // Clear existing options
                refmouldSelect.innerHTML = '<option value="" disabled selected>üõ† Select a mould</option>';
                // Fetch molds based on both the selected site and machine
                if (macId) {
                    fetch('/apifetcher/get-molds?idSite=' + siteId + '&idMac=' + macId)
                        .then(response => response.json())
                        .then(data => {
                            if (data.length > 0) {
                                data.forEach(function(tool) {
                                    var option = document.createElement('option');
                                    option.value = tool.id;
                                    option.textContent = tool.name;
                                    refmouldSelect.appendChild(option);
                                });
                            } else {
                                var option = document.createElement('option');
                                option.value = '';
                                option.textContent = 'No moulds available';
                                refmouldSelect.appendChild(option);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching moulds:', error);
                        });
                }
            });
            window.onload = function () {
                setTimeout(() => {
                    var refsiteSelect = document.getElementById('site');
                    refsiteSelect.value = ''; // Reset site selection
                    refsiteSelect.selectedIndex = 0;
                }, 1000); // Wait 1 second before resetting
            };
            document.addEventListener("DOMContentLoaded", function () {
                // Get dropdowns and reset button
                const siteFilter = document.getElementById("site");
                const machineFilter = document.getElementById("machine");
                const toolFilter = document.getElementById("tool");
                const resetButton = document.getElementById("resetFilters");
                const fileCards = document.querySelectorAll(".file-card");

                // Function to filter files dynamically
                function filterFiles() {
                    const selectedSite = siteFilter.options[siteFilter.selectedIndex].text.trim().toLowerCase();
                    const selectedMachine = machineFilter.options[machineFilter.selectedIndex].text.trim().toLowerCase();
                    const selectedTool = toolFilter.options[toolFilter.selectedIndex].text.trim().toLowerCase();
                    
                    let visibleSites = new Set();

                    // Check if the selected value is a placeholder (e.g., "‚öôÔ∏è select a machine" or "üõ† select a mould")
                    const isSiteSelected = selectedSite !== "‚öôÔ∏è select a site" && selectedSite !== "" && selectedSite !== "select a site";
                    const isMachineSelected = selectedMachine !== "‚öôÔ∏è select a machine" && selectedMachine !== "" && selectedMachine !== "select a machine";
                    const isToolSelected = selectedTool !== "üõ† select a mould" && selectedTool !== "" && selectedTool !== "select a mould";

                    fileCards.forEach(card => {
                        const cardSite = card.getAttribute("data-site").trim().toLowerCase();
                        const cardMachine = card.getAttribute("data-machine").trim().toLowerCase();
                        const cardTool = card.getAttribute("data-tool").trim().toLowerCase();
                        
                        const matchesSite = !isSiteSelected || cardSite === selectedSite;
                        const matchesMachine = !isMachineSelected || cardMachine === selectedMachine;
                        const matchesTool = !isToolSelected || cardTool === selectedTool;
                        
                        if (matchesSite && matchesMachine && matchesTool) {
                            card.style.display = "block";
                            visibleSites.add(cardSite); // Track visible site names
                        } else {
                            card.style.display = "none";
                        }
                    });
                }
                // Trigger filtering when dropdowns change
                siteFilter.addEventListener("change", filterFiles);
                machineFilter.addEventListener("change", filterFiles);
                toolFilter.addEventListener("change", filterFiles);

                // Reset button functionality (client-side reset)
                resetButton.addEventListener("click", function(event) {
                    event.preventDefault(); // Prevent the default action (page reload)

                    // Reset dropdowns to their default values
                    siteFilter.selectedIndex = 0;
                    machineFilter.selectedIndex = 0;
                    toolFilter.selectedIndex = 0;

                    // Show all file cards (reset filter)
                    fileCards.forEach(card => {
                        card.style.display = "block"; // Show all cards
                    });
                });
            });
        </script>
    {% endblock %}
{% endblock %}
