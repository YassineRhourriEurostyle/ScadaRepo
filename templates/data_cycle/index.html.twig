{% extends 'column.html.twig' %}

{% block title %}Display Last Values{% endblock %}

{% block body %}
    <h1 class="page-title">üîç Last Recorded Values</h1>

    <form name="dispParamVal" action="{{ path('datacycle_index') }}" method="get" class="filter-form">
        <table id="tabFilter" class="table table-borderless">
            <tr>
                <td>
                    <select id="refsite" name="idSite" class="form-select">
                        <option value="" disabled selected>üè≠ Select a site</option>
                        {% for site in sites %}
                            <option value="{{ site.idsites }}" {% if site.idsites == app.request.query.get('idSite') %}selected{% endif %}>
                                {{ site.siteref }}
                            </option>
                        {% endfor %}
                    </select>
                </td>
                <td>
                    <select id="refmac" name="idmac" class="form-select">
                        <option value="" disabled selected>‚öôÔ∏è Select a machine</option>
                    </select>
                </td>
                <td>
                    <select id="refmould" name="idmould" class="form-select">
                        <option value="" disabled selected>üõ† Select a mould</option>
                    </select>
                </td>
                <td style="display: flex; gap: 10px;">
                    <button type="submit" class="btn-primary btn-lg">Display</button>
                </td>
            </tr>
        </table>
    </form>

    {% if recordData %}
        <div class="table-responsive">
            <table id="tabStyleA" class="table table-hover align-middle">
                <thead class="thead-dark">
                    <tr>
                        <th>#</th>
                        <th>Mould</th>
                        <th>Date (Y-M-D)</th>
                        <th>Parameter</th>
                        <th>Value</th>
                        <th>Standard Value</th>
                        <th>Tolerance Min</th>
                        <th>Tolerance Max</th>
                    </tr>
                </thead>
                <tbody>
                    {% for record in recordData %}
                        <tr>
                            <td>{{ loop.index }}</td>
                            <td>{{ record.ToolReference }}</td>
                            <td>{{ record.DateRecord|date("Y-m-d H:i:s") }}</td>
                            <td>{{ record.ParamName }}</td>
                            <td>{{ record.ParamValue }}</td>
                            <td>{{ record.StdValue }}</td>
                            <td>{{ record.ToleranceMini }}</td>
                            <td>{{ record.ToleranceMaxi }}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    {% endif %}
    {% block javascripts %}
        <script>
            // Listen for change event on the site dropdown
            document.getElementById('refsite').addEventListener('change', function() {
                var siteId = this.value; // Get the selected site ID
                var refmacSelect = document.getElementById('refmac'); // Machine dropdown
                var refmouldSelect = document.getElementById('refmould'); // Mould dropdown

                // Clear existing options
                refmacSelect.innerHTML = '<option value="" disabled selected>‚öôÔ∏è Select a machine</option>';
                refmouldSelect.innerHTML = '<option value="" disabled selected>üõ† Select a mould</option>';

                // Fetch machines for the selected site
                fetch('/apifetcher/get-machines?idSite=' + siteId)
                    .then(response => response.json())
                    .then(data => {
                        if (data.length > 0) {
                            data.forEach(function(machine) {
                                var option = document.createElement('option');
                                option.value = machine.id;
                                option.textContent = machine.name;
                                refmacSelect.appendChild(option);
                            });
                        } else {
                            var option = document.createElement('option');
                            option.value = '';
                            option.textContent = 'No machines available';
                            refmacSelect.appendChild(option);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching machines:', error);
                    });

                // Fetch molds for the selected site
               /* fetch('/apifetcher/get-molds?idSite=' + siteId)
                    .then(response => response.json())
                    .then(data => {
                        if (data.length > 0) {
                            data.forEach(function(tool) {
                                var option = document.createElement('option');
                                option.value = tool.id;
                                option.textContent = tool.name;
                                refmouldSelect.appendChild(option);
                            });
                        } else {
                            var option = document.createElement('option');
                            option.value = '';
                            option.textContent = 'No moulds available';
                            refmouldSelect.appendChild(option);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching moulds:', error);
                    });
                    */
            });

            // Listen for change event on the machine dropdown
            document.getElementById('refmac').addEventListener('change', function() {
                var siteId = document.getElementById('refsite').value;
                var macId = this.value;
                var refmouldSelect = document.getElementById('refmould'); // Mould dropdown

                // Clear existing options
                refmouldSelect.innerHTML = '<option value="" disabled selected>üõ† Select a mould</option>';
                //console.log("Selected Site ID:", siteId);
                //console.log("Selected Machine ID:", macId);
                // Fetch molds based on both the selected site and machine
                if (macId) {
                    fetch('/apifetcher/get-molds?idSite=' + siteId + '&idMac=' + macId)
                        .then(response => response.json())
                        .then(data => {
                            //console.log("API Response:", data); // This logs the data returned from the API

                            if (data.length > 0) {
                                data.forEach(function(tool) {
                                    var option = document.createElement('option');
                                    option.value = tool.id;
                                    option.textContent = tool.name;
                                    refmouldSelect.appendChild(option);
                                });
                            } else {
                                var option = document.createElement('option');
                                option.value = '';
                                option.textContent = 'No moulds available';
                                refmouldSelect.appendChild(option);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching moulds:', error);
                        });
                }
            });
            /*function resetFilters() {
                setTimeout(() => {
                var refsiteSelect = document.getElementById('refsite');
                refsiteSelect.value = '';
                refsiteSelect.selectedIndex = 0;
                }, 5000);
            }*/
            window.onload = function () {
                setTimeout(() => {
                    var refsiteSelect = document.getElementById('refsite');
                    refsiteSelect.value = ''; // Reset site selection
                    refsiteSelect.selectedIndex = 0;
                }, 1000); // Wait 1 second before resetting
            };

        </script>
    {% endblock %}
{% endblock %}
